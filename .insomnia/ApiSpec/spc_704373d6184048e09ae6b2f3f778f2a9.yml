_id: spc_704373d6184048e09ae6b2f3f778f2a9
type: ApiSpec
parentId: wrk_2979b35e9f144b468981bed0a0a0ee91
modified: 1668102534536
created: 1652360191728
fileName: Petstore.yaml
contents: >
  info:
    title: Petstore
    version: 1.0.6
  openapi: 3.0.0

  paths:
    /pet:
      post:
        description: Add a new pet to the store
        operationId: addPet
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/json
            type: string
          style: simple
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          required: true
        responses:
          '405':
            description: Invalid input
      put:
        description: Update an existing pet
        operationId: updatePet
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/json
            type: string
          style: simple
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          required: true
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Pet not found
          '405':
            description: Validation exception
    /pet/findByStatus:
      get:
        description: Multiple status values can be provided with comma separated strings
        operationId: findPetsByStatus
        parameters:
        - description: Status values that need to be considered for filter
          explode: true
          in: query
          name: status
          required: true
          schema:
            items:
              enum:
              - available
              - pending
              - sold
              type: string
            type: array
          style: form
        responses:
          '200':
            content:
              application/xml:
                schema:
                  items:
                    $ref: '#/components/schemas/Pet'
                  title: response200
                  type: array
                  xml:
                    attribute: false
                    wrapped: false
            description: successful operation
          '400':
            description: Invalid status value
    /pet/findByTags:
      get:
        description: Multiple tags can be provided with comma separated strings. Use
          tag1, tag2, tag3 for testing.
        operationId: findPetsByTags
        parameters:
        - description: Tags to filter by
          explode: true
          in: query
          name: tags
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
        responses:
          '200':
            content:
              application/xml:
                schema:
                  items:
                    $ref: '#/components/schemas/Pet'
                  title: response200
                  type: array
                  xml:
                    attribute: false
                    wrapped: false
            description: successful operation
          '400':
            description: Invalid tag value
    /pet/{petId}:
      delete:
        description: Deletes a pet
        operationId: deletePet
        parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Pet not found
      get:
        description: Returns a single pet
        operationId: getPetById
        responses:
          '200':
            content:
              application/xml:
                schema:
                  $ref: '#/components/schemas/Pet'
            description: successful operation
          '400':
            description: Invalid ID supplied
          '404':
            description: Pet not found
        security:
        - api_key: []
      parameters:
      - description: ID of pet to return
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      post:
        description: Updates a pet in the store with form data
        operationId: updatePetWithForm
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/x-www-form-urlencoded
            type: string
          style: simple
        requestBody:
          content:
            multipart/form-data:
              schema:
                properties:
                  name:
                    description: Updated name of the pet
                    title: name
                    type: string
                  status:
                    description: Updated status of the pet
                    title: status
                    type: string
                type: object
          required: true
        responses:
          '405':
            description: Invalid input
    /pet/{petId}/uploadImage:
      parameters:
      - description: ID of pet to return
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      post:
        description: uploads an image
        operationId: uploadFile
        requestBody:
          content:
            multipart/form-data:
              schema:
                properties:
                  additionalMetadata:
                    description: Additional data to pass to server
                    title: additionalMetadata
                    type: string
                  file:
                    description: file to upload
                    title: file
                    type: string
                type: object
          required: true
        responses:
          '200':
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
            description: successful operation
    /store/inventory:
      get:
        description: Returns a map of status codes to quantities
        operationId: getInventory
        responses:
          '200':
            content:
              application/json:
                schema:
                  additionalProperties: true
                  properties:
                    type:
                      type: integer
                  required:
                  - type
                  title: response200
                  type: object
            description: successful operation
        security:
        - api_key: []
    /store/order:
      post:
        description: Place an order for a pet
        operationId: placeOrder
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/json
            type: string
          style: simple
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          required: true
        responses:
          '200':
            content:
              application/xml:
                schema:
                  $ref: '#/components/schemas/Order'
            description: successful operation
          '400':
            description: Invalid Order
    /store/order/{orderId}:
      delete:
        description: For valid response try integer IDs with positive integer value.
          Negative or non-integer values will generate API errors
        operationId: deleteOrder
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Order not found
      get:
        description: For valid response try integer IDs with value >= 1 and <= 10. Other
          values will generated exceptions
        operationId: getOrderById
        responses:
          '200':
            content:
              application/xml:
                schema:
                  $ref: '#/components/schemas/Order'
            description: successful operation
          '400':
            description: Invalid ID supplied
          '404':
            description: Order not found
      parameters:
      - description: ID of pet that needs to be fetched
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          maximum: 10
          minimum: 1
          type: integer
        style: simple
    /user:
      post:
        description: This can only be done by the logged in user.
        operationId: createUser
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/json
            type: string
          style: simple
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          '200':
            description: successful operation
    /user/createWithArray:
      post:
        description: Creates list of users with given input array
        operationId: createUsersWithArrayInput
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/json
            type: string
          style: simple
        requestBody:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: body
                type: array
          required: true
        responses:
          '200':
            description: successful operation
    /user/createWithList:
      post:
        description: Creates list of users with given input array
        operationId: createUsersWithListInput
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/json
            type: string
          style: simple
        requestBody:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: body
                type: array
          required: true
        responses:
          '200':
            description: successful operation
    /user/login:
      get:
        description: Logs user into the system
        operationId: loginUser
        parameters:
        - description: The user name for login
          explode: true
          in: query
          name: username
          required: true
          schema:
            type: string
          style: form
        - description: The password for login in clear text
          explode: true
          in: query
          name: password
          required: true
          schema:
            type: string
          style: form
        responses:
          '200':
            content:
              application/xml:
                schema:
                  title: response200
                  type: string
                  xml:
                    attribute: false
                    name: response200
                    wrapped: false
            description: successful operation
            headers:
              X-Expires-After:
                description: date in UTC when token expires
                explode: false
                schema:
                  type: string
                style: simple
              X-Rate-Limit:
                description: calls per hour allowed by the user
                explode: false
                schema:
                  type: string
                style: simple
          '400':
            description: Invalid username/password supplied
    /user/logout:
      get:
        description: Logs out current logged in user session
        operationId: logoutUser
        responses:
          '200':
            description: successful operation
    /user/{username}:
      delete:
        description: This can only be done by the logged in user.
        operationId: deleteUser
        responses:
          '400':
            description: Invalid username supplied
          '404':
            description: User not found
      get:
        description: Get user by user name
        operationId: getUserByName
        responses:
          '200':
            content:
              application/xml:
                schema:
                  $ref: '#/components/schemas/User'
            description: successful operation
          '400':
            description: Invalid username supplied
          '404':
            description: User not found
      parameters:
      - description: The name that needs to be fetched. Use user1 for testing.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      put:
        description: This can only be done by the logged in user.
        operationId: updateUser
        parameters:
        - explode: false
          in: header
          name: Content-Type
          required: true
          schema:
            enum:
            - application/json
            type: string
          style: simple
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          '400':
            description: Invalid user supplied
          '404':
            description: User not found
  servers:

  - url: https://petstore.swagger.io/v2

  components:
    callbacks: {}
    examples: {}
    headers: {}
    links: {}
    parameters: {}
    requestBodies: {}
    responses: {}
    schemas:
      ApiResponse:
        properties:
          code:
            format: int32
            title: code
            type: integer
          message:
            title: message
            type: string
          type:
            title: type
            type: string
        title: ApiResponse
        type: object
      Category:
        properties:
          id:
            format: int64
            title: id
            type: integer
          name:
            title: name
            type: string
        title: Category
        type: object
        xml:
          name: Category
      Order:
        properties:
          complete:
            title: complete
            type: boolean
          id:
            format: int64
            title: id
            type: integer
          petId:
            format: int64
            title: petId
            type: integer
          quantity:
            format: int32
            title: quantity
            type: integer
          shipDate:
            format: date-time
            title: shipDate
            type: string
          status:
            description: Order Status
            enum:
            - placed
            - approved
            - delivered
            title: status
            type: string
        title: Order
        type: object
        xml:
          name: Order
      Pet:
        properties:
          category:
            $ref: '#/components/schemas/Category'
          id:
            format: int64
            title: id
            type: integer
          name:
            title: name
            type: string
          photoUrls:
            items:
              type: string
              xml:
                name: photoUrl
            title: photoUrls
            type: array
            xml:
              attribute: false
              wrapped: true
          status:
            description: pet status in the store
            enum:
            - available
            - pending
            - sold
            title: status
            type: string
          tags:
            items:
              $ref: '#/components/schemas/Tag'
            title: tags
            type: array
            xml:
              attribute: false
              wrapped: true
        required:
        - name
        - photoUrls
        title: Pet
        type: object
        xml:
          name: Pet
      Tag:
        properties:
          id:
            format: int64
            title: id
            type: integer
          name:
            title: name
            type: string
        title: Tag
        type: object
        xml:
          name: Tag
      User:
        properties:
          email:
            title: email
            type: string
          firstName:
            title: firstName
            type: string
          id:
            format: int64
            title: id
            type: integer
          lastName:
            title: lastName
            type: string
          password:
            title: password
            type: string
          phone:
            title: phone
            type: string
          userStatus:
            description: User Status
            format: int32
            title: userStatus
            type: integer
          username:
            title: username
            type: string
        title: User
        type: object
        xml:
          name: User
    securitySchemes:
      api_key:
        in: header
        name: api_key
        type: apiKey
contentType: yaml
